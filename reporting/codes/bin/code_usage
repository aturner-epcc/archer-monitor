#!/usr/bin/env python
#
#===============================================================
# code_usage
#
# Analyse code usage from logs
#===============================================================
#
#===============================================================
# v0.1 - Initial version
#===============================================================
#
#----------------------------------------------------------------------
# Copyright 2014 EPCC, The University of Edinburgh
#
# This file is part of archer-monitoring.
#
# archer-monitoring is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# archer-monitoring is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with archer-monitoring.  If not, see <http://www.gnu.org/licenses/>.
#----------------------------------------------------------------------
#
"""Get code usage statistics from specified log file.

OPTIONS

-h,--help                Show this help.
"""
__author__ = 'Andrew Turner, EPCC, The University of Edinburgh'
__version__ = '0.1'

# Import the required modules
from code_def import CodeDef
import error
import sys
import os
import fnmatch
import getopt
import subprocess
import ConfigParser
import grp

def main(argv):

    #=======================================================
    # Print out the banner
    #=======================================================
    sys.stderr.write("===========================================================================\n")
    sys.stderr.write("code_usage " + __version__ + "\n")
    sys.stderr.write("---------------------------------------------------------------------------\n")
    sys.stderr.write("Copyright 2012  EPCC, The University of Edinburgh \n")
    sys.stderr.write("This program comes with ABSOLUTELY NO WARRANTY; for details type `bolt -i'.\n")
    sys.stderr.write("This is free software, and you are welcome to redistribute it\n")
    sys.stderr.write("under certain conditions; type `code_usage -i' for details.\n")
    sys.stderr.write("===========================================================================\n")

    #=======================================================
    # Global configuration section
    #=======================================================
    rootDir = os.environ['ARCHER_MON_BASEDIR']

    #=======================================================
    # Read any code definitions
    #=======================================================
    codeConfigDir = rootDir + '/reporting/codes/descriptions'
    codes = []
    nCode = 0
    # We also need to create a dictionary of resources here
    codeDict = {}
    for file in os.listdir(codeConfigDir):
        if fnmatch.fnmatch(file, '*.code'):
            nCode += 1
            code = CodeDef()   
            code.readConfig(codeConfigDir + '/' + file)
            codes.append(code)
            codeDict[code.name] = nCode - 1

    for code in codes:
       summary = code.summaryString()
       sys.stdout.write("{0}\n".format(summary))

    #=======================================================
    # Command line options
    #=======================================================
    # Read the command-line options
    try:
        opts, args = getopt.getopt(argv, "n:N:d:A:t:o:r:b:q:j:c:plshi", \
                      ["tasks=", "tasks-per-node=", "threads=", "account=", \
                      "job-time=", "output-file=", "resource=", "batch=", "queue=", \
                      "job-name=", "code=", "force-parallel", "list", "submit", \
                      "help", "info"])
    except getopt.GetoptError:
        error.handleError("Could not parse command line options\n")

    # Parse the command-line options
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            printHelp(rootDir)
            exit(0)

def printHelp(rootDir):
    """Print help for the tool.
           
           Arguments:
              str rootDir - The root install directory of the tool.
        """
    subprocess.call(["pydoc", rootDir + "/reporting/codes/bin/code_usage"])

if __name__ == "__main__":
    main(sys.argv[1:])
